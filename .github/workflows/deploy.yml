name: Deploy NestJS to AWS Lambda

on:
  push:
    branches: [ ci-cd ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
      
    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0
      
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
    
    # Phase 1: Create infrastructure except Lambda deployment
    - name: Create initial infrastructure
      working-directory: ./terraform
      run: |
        # Apply with a placeholder image to create ECR repository and roles
        terraform apply -auto-approve \
          -var="aws_region=${{ secrets.AWS_REGION }}" \
          -var="ecr_repository_name=${{ secrets.ECR_REPOSITORY }}" \
          -var="lambda_function_name=${{ secrets.LAMBDA_FUNCTION_NAME }}" \
          -var="environment=${{ secrets.ENVIRONMENT }}" \
          -var="use_placeholder_image=true"
    
    # Phase 2: Build and push Docker image to already created ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push Docker image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./messages-service
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
    # Phase 3: Update Lambda with the real image
    - name: Update Lambda with Docker image
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve \
          -var="aws_region=${{ secrets.AWS_REGION }}" \
          -var="ecr_repository_name=${{ secrets.ECR_REPOSITORY }}" \
          -var="lambda_function_name=${{ secrets.LAMBDA_FUNCTION_NAME }}" \
          -var="environment=${{ secrets.ENVIRONMENT }}" \
          -var="use_placeholder_image=false" \
          -var="image_uri=${{ steps.build-image.outputs.image }}"